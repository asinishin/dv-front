(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{"/X/Z":function(e,t,r){"use strict";r.r(t);r("iPZ8"),r("kypl");var n=r("nbuU"),a=r.n(n),l=r("WSeP"),s=r.n(l),i=r("ipr/"),c=r.n(i),f=r("hsT8"),o=r.n(f),u=r("2/1H");t.default=angular.module("deskworks.billing.recurringCharge.edit",["deskworks.recurringCharge.service","deskworks.userProfile.service","deskworks.recurringCharge.service","deskworks.routeHelper","deskworks.recurringChargeAudit",u.a.name]).config(["$routeProvider",function(e){e.when("/recurring-charges/:recurringId/edit",{templateUrl:"billing/recurring-billing/recurring-edit.tpl.html",controller:"RecurringChargeEditCtrl as $ctrl",label:"Edit",routeBranch:"recurring-charges",translations:["recurring-billing"],resolve:{charge:["dwAlerts","$route","recurringChargeService","state","routeHelper","resolveTimezone",function(e,t,r,n,a,l){return a.auth().then((function(){return a.selectUser()})).then((function(){return l()})).then((function(){return r.get(n.getCurrentCenterId(),n.getCurrentUserId(),t.current.params.recurringId).catch((function(t){return e.error(t,"Failed to get recurring charge.")}))}))}],charges:["dwAlerts","$route","recurringChargeService","state","routeHelper","resolveTimezone",function(e,t,r,n,a,l){return a.auth().then((function(){return a.selectUser()})).then((function(){return l()})).then((function(){return r.query(n.getCurrentCenterId(),n.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to get recurring charge.")}))}))}],settings:["dwAlerts","setupService","state","routeHelper",function(e,t,r,n){return n.auth().then((function(){return t.getSetupSettings(r.getCurrentCenterId()).catch((function(t){return e.error(t,"Failed to get setup settings.")}))}))}],user:["dwAlerts","userProfileService","state","routeHelper","resolveTimezone",function(e,t,r,n,a){return n.auth().then((function(){return n.selectUser()})).then((function(){return a()})).then((function(){return t.get(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to get user profile.")}))}))}],resUnits:["dwAlerts","state","ReservationUnit",function(e,t,r){return r.query(t.getCurrentCenterId()).catch((function(t){return e.error(t,"Failed to query reservation units")}))}]}})}]).controller("RecurringChargeEditCtrl",["$scope","$route","$translate","dwAlerts","recurringChargeService","userProfileService","ReservationUnit","charge","charges","settings","user","state","helper","optsBillingFrequency","optsRecurringChargeStatus","optsNoticePeriod","optsDiscountType","optsMonthsOfDiscount","optsRecurringChargeTerminate","resUnits","optsRenewalTerm","optsRenewalNoticePeriod",function(e,t,r,n,l,i,f,u,d,p,g,h,m,I,R,E,b,C,T,N,A,S){var P,L=this;e.backPath="/recurring-charges",e.$watch("state.getCurrentCenterId()",(function(t,r){t!==r&&h.setPath(e.backPath)})),h.setPageTitle(r.instant("RECURRING_BILLING.PAGE_TITLE",{userName:g.fullNameCompany})),L.charge=u,L.initialStatus=L.charge.status,L.charge.startDate=L.charge.startDate||L.charge.entryDate,L.billingFrequencyProducts={},L.billingFrequencies=I,L.noticePeriods=E,L.discountTypes=b,L.discountTrialOccurrences=C,L.optsTerminate=T,L.optsRenewalTerm=A,L.optsRenewalNoticePeriod=S,L.chargeStatuses=o()(R).call(R,(function(e){return"deleted"!==e.id||!h.isLoggedRole("coordinator")})),"new"===t.current.params.recurringId&&(L.chargeStatuses=c()(R).call(R,0,1)),s()(P=u.options.priceListProducts).call(P,(function(e){var t=a()(m).call(m,L.billingFrequencies,e.billingFrequency);t&&(L.billingFrequencyProducts[t.id]=L.billingFrequencyProducts[t.id]||[],L.billingFrequencyProducts[t.id].push(e))})),L.reservationUnits=o()(N).call(N,(function(e){return!e.attachedUserId||e.id==L.charge.attachedReservationUnitId})),L.activeChargesCount=o()(d).call(d,(function(e){return"active"===e.status.id})).length,L.billingFrequencyChange=function(){L.charge.billingFrequency&&L.billingFrequencyProducts[L.charge.billingFrequency.id]&&(L.charge.priceListProduct=a()(m).call(m,L.billingFrequencyProducts[L.charge.billingFrequency.id],L.charge.priceListProductId)),L.charge.terminate="asNeeded"===L.charge.billingFrequency.id?T[0]:"",L.charge.billingFrequency.months&&moment.isMoment(L.charge.lastBillDate)&&(L.charge.nextBillDate=L.charge.lastBillDate.clone().add(L.charge.billingFrequency.months,"M"),p.prorateAtStart&&"monthly"===L.charge.billingFrequency.id&&L.charge.nextBillDate.date(1))},L.charge.id||L.billingFrequencyChange(),L.onChangeStatus=function(){"active"===L.initialStatus.id&&"active"===L.charge.status.id&&("boolean"==typeof L.charge.makeMemberInactive&&delete L.charge.makeMemberInactive,"boolean"==typeof L.charge.makeCoMembersInactive&&delete L.charge.makeCoMembersInactive)},L.calcTerminationDate=function(){"asNeeded"!==L.charge.billingFrequency.id&&L.charge.noticeDate&&L.charge.noticePeriod&&(L.charge.terminate=L.charge.noticeDate.clone().add(L.charge.noticePeriod.id,"d"))},L.isNextBillDateDisabled=function(){return null===L.charge.nextBillDate&&moment.isMoment(L.charge.terminate)||moment.isMoment(L.charge.terminate)&&moment.isMoment(L.charge.nextBillDate)&&L.charge.terminate.isSameOrBefore(L.charge.nextBillDate,"date")},L.backToList=function(){return h.setPath("/recurring-charges")},L.saveCharge=function(e){if(!m.pointFirstInvalid("#recurringCharge")){var r,a={description:L.charge.description,priceListProductId:angular.isDefined(L.charge.priceListProduct)?L.charge.priceListProduct.id:null,customPrice:L.charge.customPrice||0===L.charge.customPrice?+L.charge.customPrice:null,startDate:L.charge.startDate,nextBillDate:L.isNextBillDateDisabled()?null:L.charge.nextBillDate,lastBillDate:L.charge.lastBillDate,noticeDate:L.charge.noticeDate||null,terminate:"asNeeded"===L.charge.billingFrequency.id?L.charge.terminate.id:L.charge.terminate||null,quantity:L.charge.quantity,noticePeriod:L.charge.noticePeriod&&L.charge.noticePeriod.id,status:angular.isDefined(L.charge.status)?L.charge.status.id:void 0,notes:L.charge.notes,attachedReservationUnitId:L.charge.attachedReservationUnitId?+L.charge.attachedReservationUnitId:null};return p.enableRenewalNotices&&(a.renewalDate=L.charge.renewalDate,a.renewalTerm=L.charge.renewalTerm,a.renewalNoticePeriod=L.charge.renewalNoticePeriod),L.charge.discountType.id?(a.discountTypeId=L.charge.discountType.id,a.discountValue=L.charge.discountValue,L.charge.discountTrialOccurrences&&(a.discountTrialOccurrences=L.charge.discountTrialOccurrences.id),a.discountStartDate=L.charge.discountStartDate):a.discountTypeId=0,"asNeeded"===L.charge.billingFrequency.id&&(a.passBalance=+L.charge.passBalance,a.refill=e),"boolean"==typeof L.charge.makeMemberInactive&&(a.makeMemberInactive=L.charge.makeMemberInactive),"boolean"==typeof L.charge.makeCoMembersInactive&&(a.makeCoMembersInactive=L.charge.makeCoMembersInactive),"new"===t.current.params.recurringId?(a.postProration=!!L.charge.postProration,r=l.createCharge(h.getCurrentCenterId(),h.getCurrentUserId(),a)):r=l.updateCharge(h.getCurrentCenterId(),h.getCurrentUserId(),t.current.params.recurringId,a),r.then((function(){if(L.charge.makeMemberInactive&&i.resetCache(),!e)return h.setPath("/recurring-charges");t.reload()})).catch((function(e){return n.error(e,"Failed to save recurring charge.")}))}}}])},"/uFl":function(e,t){e.exports='<ff-panel style="margin:1.5rem 0"> <ff-panel-header><span translate=RECURRING_BILLING.AUDIT.HEADER></span></ff-panel-header> <div ng-if="!$ctrl.entries.length && !$ctrl.fetching" class=animate-collapse> <span translate=GLOBAL.NONE></span> </div> <ff-header ng-if=$ctrl.entries.length class=animate-collapse> <ff-row> <cell><span translate=RECURRING_BILLING.AUDIT.PROPERTY></span></cell> <cell><span translate=RECURRING_BILLING.AUDIT.OLD_VALUE></span></cell> <cell><span translate=RECURRING_BILLING.AUDIT.NEW_VALUE></span></cell> </ff-row> </ff-header> <ff-col infinite-scroll=$ctrl.fetch() infinite-scroll-distance=2 infinite-scroll-container="\'.snap-content-scroller\'"> <div ng-repeat="entry in $ctrl.entries" class=animate-collapse> <ff-row> <ff-label class=standout><span> {{entry.createdAt | date:\'mediumDate\'}} <span nice-time=entry.createdAt></span> by {{entry.createdBy}} </span></ff-label> </ff-row> <ff-row ng-repeat="prop in entry.props"> <ff-static>{{prop.name}}</ff-static> <ff-static>{{prop.old | nd}}</ff-static> <ff-static>{{prop.new | nd}}</ff-static> </ff-row> </div> </ff-col> <ff-row ff-dim=true ng-if=$ctrl.fetching class=animate-collapse><ff-static></ff-static></ff-row> </ff-panel> '},"1A1g":function(e,t){angular.module("deskworks.billing",["deskworks.billing.purchase.list","deskworks.billing.purchase.edit","deskworks.billing.recurringCharge.list","deskworks.billing.recurringCharge.edit"])},"1e4I":function(e,t){e.exports='<div class=recurring-charges ff-bulk-read-only> <h1 class=page-title>{{state.getPageTitle()}}</h1> <ff-panel> <ff-header> <ff-row> <cell><span translate=RECURRING_BILLING.LIST.PRODUCT></span></cell> <cell flex="0 0 25%"><span translate=RECURRING_BILLING.GENERAL.DESCRIPTION></span></cell> <cell flex="0 0 17%" class=ff-right><span translate=RECURRING_BILLING.LIST.NEXT_BILLED></span></cell> <cell flex="0 0 17%" class=ff-center><span translate=RECURRING_BILLING.LIST.STATUS></span></cell> <cell flex="{xs: \'0 0 90px\', sm: \'0 0 120px\'}" class=ff-center><span translate=RECURRING_BILLING.LIST.USE_FOR_CHECK_IN_BILLING></span></cell> <ff-btn-group flex="0 0 auto" class="buttons-row zero-height"> <ff-btn sense=edit size=xs></ff-btn> </ff-btn-group> </ff-row> </ff-header> <ff-row ng-repeat="charge in $ctrl.charges"> <ff-static ff-bind=::charge.productName></ff-static> <ff-static flex="0 0 25%" ff-bind=::charge.description></ff-static> <ff-static flex="0 0 17%" class=ff-right ff-bind="::charge.nextBilled | date:\'mediumDate\'"></ff-static> <ff-static flex="0 0 17%" class=ff-center ff-bind=::charge.status.name></ff-static> <ff-label flex="{xs: \'0 0 90px\', sm: \'0 0 120px\'}" class=ff-center ff-dim=charge.$spin> <ff-checkbox ff-model=charge.useForCheckInBilling ff-value=true ff-change=$ctrl.saveUseForCheckInBilling(charge) ng-if=::charge.productHasPasses></ff-checkbox> <span ng-if=::!charge.productHasPasses translate=RECURRING_BILLING.LIST.NOT_AVAILABLE></span> </ff-label> <ff-btn-group flex="0 0 auto" class=buttons-row> <ff-btn sense=edit size=xs ff-click=$ctrl.edit(charge) title="{{\'GLOBAL.BTN_EDIT\' | translate}}"></ff-btn> </ff-btn-group> </ff-row> </ff-panel> <ff-btn-group class=buttons-bottom> <ff-btn sense=new ff-click=$ctrl.new()><span translate=RECURRING_BILLING.LIST.BTN_NEW></span></ff-btn> </ff-btn-group> </div> '},"53Pq":function(e,t,r){},"8JIs":function(e,t,r){"use strict";r.r(t);var n=r("hsT8"),a=r.n(n),l=r("WSeP"),s=r.n(l);t.default=angular.module("deskworks.billing.purchase.list",["deskworks.center.service","deskworks.purchase.service","deskworks.routeHelper","deskworks.SecurityDepositRecord"]).config(["$routeProvider",function(e){e.when("/purchases",{templateUrl:"billing/purchase/purchase-list.tpl.html",controller:"PurchaseListCtrl as $ctrl",label:"Purchases",routeBranch:"purchases",translations:["purchase"],resolve:{purchases:["dwAlerts","purchaseService","state","routeHelper","resolveTimezone",function(e,t,r,n,a){return n.auth().then((function(){return n.selectUser()})).then((function(){return a()})).then((function(){return t.query(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to query purchases.")}))}))}],user:["dwAlerts","userProfileService","state","routeHelper","resolveTimezone",function(e,t,r,n,a){return n.auth().then((function(){return n.selectUser()})).then((function(){return a()})).then((function(){return t.get(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to get user profile.")}))}))}],center:["dwAlerts","centerService","state",function(e,t,r){return t.get(r.getCurrentCenterId(r.getCurrentCenterId())).catch((function(t){return e.error(t,"Failed to get center.")}))}],securityDepositRecords:["dwAlerts","state","routeHelper","resolveTimezone","SecurityDepositRecord",function(e,t,r,n,a){return r.auth().then((function(){return r.selectUser()})).then((function(){return n()})).then((function(){return a.query({centerId:t.getCurrentCenterId(),userId:t.getCurrentUserId()}).catch((function(t){return e.error(t,"Failed to query security deposit records.")}))}))}]}})}]).controller("PurchaseListCtrl",["$scope","$translate","dwAlerts","center","purchases","state","helper","user","purchaseService",function(e,t,r,n,l,i,c,f,o){var u,d=this;d.center=n,d.purchases=l,d.types=[{id:"credit",name:"PURCHASE.LIST.CREDIT.HEADER"},{id:"open",name:"PURCHASE.LIST.OPEN.HEADER"},{id:"paid",name:"PURCHASE.LIST.PAID.HEADER"}],s()(u=d.types).call(u,(function(e){var t;e.orders=a()(t=d.purchases).call(t,(function(t){return t.type===e.id}))})),i.setPageTitle(t.instant("PURCHASE.LIST.PAGE_TITLE",{userName:f.fullNameCompany,centerName:n.name})),d.editPurchase=function(e){return i.setPath("/purchases/"+e.id+"/edit")},d.viewPurchase=function(e){return i.setPath("/purchases/"+e.id+"/view")},d.createPurchase=function(){return o.createPurchase(i.getCurrentCenterId(),i.getCurrentUserId()).catch((function(e){return r.error(e,"Failed to create purchase")})).then((function(e){return i.setPath("/purchases/"+e.id+"/edit")}))}}])},DyWX:function(e,t,r){var n={"./billing/billing-profile/billing-profile-edit.tpl.html":"laxG","./billing/purchase/audit/purchase-audit.tpl.html":"Spb0","./billing/purchase/dw-add-charges.tpl.html":"G7f6","./billing/purchase/purchase-edit.tpl.html":"qoyf","./billing/purchase/purchase-list.tpl.html":"Li7w","./billing/purchase/purchase-payment.tpl.html":"uVw+","./billing/recurring-billing/recurring-charge-audit.tpl.html":"/uFl","./billing/recurring-billing/recurring-edit.tpl.html":"qPMi","./billing/recurring-billing/recurring-list.tpl.html":"1e4I","./flex-forms/controls/ff-control.tpl.html":"8PDb","./flex-forms/ff-datepicker/ff-datepicker.tpl.html":"HMLR","./members/our-members/our-member-modal.tpl.html":"gB/y","./members/our-members/our-members-embedding.tpl.html":"SnDj","./members/our-members/our-members.tpl.html":"Ht9o","./members/user-profile/billing-sections/up-billing-method.tpl.html":"ntZG","./members/user-profile/billing-sections/up-credit-cards.tpl.html":"l7tb","./members/user-profile/billing-sections/up-e-checks.tpl.html":"Ntds","./members/user-profile/sections/up-access-codes.tpl.html":"aj6+","./members/user-profile/sections/up-addresses.tpl.html":"auvQ","./members/user-profile/sections/up-co-members.tpl.html":"Q9OX","./members/user-profile/sections/up-comments.tpl.html":"WZXA","./members/user-profile/sections/up-custom-fields.tpl.html":"jtA9","./members/user-profile/sections/up-documents.tpl.html":"SHcK","./members/user-profile/sections/up-lead-source.tpl.html":"aT6e","./members/user-profile/sections/up-login-info.tpl.html":"sLGz","./members/user-profile/sections/up-mailboxes.tpl.html":"MHBY","./members/user-profile/sections/up-membership.tpl.html":"cdCP","./members/user-profile/sections/up-personal-info.tpl.html":"80Eh","./members/user-profile/sections/up-phones.tpl.html":"zcfi","./members/user-profile/sections/up-photo.tpl.html":"FZlk","./members/user-profile/sections/up-printer-codes.tpl.html":"NQ3A","./members/user-profile/sections/up-shareable.tpl.html":"3xdx","./members/user-profile/sections/up-system-info.tpl.html":"SxCY","./members/user-profile/sections/up-terms-of-service.tpl.html":"e8sX","./members/user-profile/user-profile.tpl.html":"OdV3","./members/user-search/user-search.tpl.html":"L3g9","./sidebar/sidebar.tpl.html":"f+zm","./sign-in/dw-sign-in.tpl.html":"Mm7d","./sign-in/sign-in.tpl.html":"EyXH"};function a(e){var t=l(e);return r(t)}function l(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=l,e.exports=a,a.id="DyWX"},G7f6:function(e,t){e.exports='<div> <div class="em ff-bmargin" ng-if=!$ctrl.noCollapse> <span translate=PURCHASE.CHARGES.HEADER></span><span ng-if=$ctrl.userPriceList>, <span translate=PURCHASE.USER_PRICE_LIST></span>: <span ng-bind="$ctrl.userPriceList.name || \'-\'"></span> </span> </div> <div id=chargeType-{{chargeType.id}} ng-repeat="chargeType in $ctrl.purchase.options.chargeTypes"> <ff-btn sense=collapse ff-click="$ctrl.collapsed[chargeType.id] = !$ctrl.collapsed[chargeType.id]" ng-class="{ collapsed: !$ctrl.collapsed[chargeType.id] }" class=dw-add-charges-collapse-btn ng-if=!$ctrl.noCollapse>{{chargeType.name}}</ff-btn> <div ng-collapse="!$ctrl.collapsed[chargeType.id] && !$ctrl.noCollapse"> <ff-panel class=ff-bmargin role=article aria-label="{{\'PURCHASE.CHARGES.ADD_CHARGES\' | translate: { chargeType: chargeType.name } }}"> <ff-panel-header ng-if=$ctrl.noCollapse>{{chargeType.name}}</ff-panel-header> <form name=formProduct id=product{{product.id}} ng-repeat="product in chargeType.packages"> <div class=ff-bmargin> <ff-header>{{product.name}} - {{product.price | ncurrency}}</ff-header> <div class="ff-grid gutter-h-half"> <label flex="{md: \'0 0 50%\'}" class=ff-row ng-if="chargeType.id === \'custom\'"> <ff-label flex="0 0 78px" ff-required=true><span translate=PURCHASE.CHARGES.NAME></span></ff-label> <ff-text name=name ff-model=product.name ff-required=true ff-validate-alert="{{\'PURCHASE.CHARGES.NAME\' | translate}}"></ff-text> </label> <ff-row flex="{md: \'0 0 50%\'}" ng-if="chargeType.id === \'custom\'"> <label flex="0 1 160px"> <ff-label flex="0 0 78px" ff-required=true><span translate=PURCHASE.CHARGES.PRICE></span></ff-label> <ff-price name=price ff-model=product.price ff-required=true ff-validate-alert="{{\'PURCHASE.CHARGES.PRICE\' | translate}}"></ff-price> </label> <label flex="0 0 auto"> <ff-checkbox flex="0 0 auto" name=isTaxable ff-model=product.isTaxable>Is Taxable</ff-checkbox> </label> </ff-row> <ff-row flex="{md: \'0 0 50%\'}"> <label flex="0 0 34%"> <ff-label flex="0 0 78px" ff-required=true><span translate=PURCHASE.CHARGES.QUANTITY></span></ff-label> <ff-number flex="1 1 1%" name=qty ff-model=product.quantity ff-required=true ff-validate-alert="{{\'PURCHASE.CHARGES.QUANTITY\' | translate}}"></ff-number> </label> <label flex="0 0 66%"> <ff-label flex="0 0 78px"><req translate=PURCHASE.CHARGES.USE_DATE></req></ff-label> <ff-date flex="1 1 1%" name=chargedAt ff-model=product.chargedAt ff-required=true ff-validate-alert="{{\'PURCHASE.CHARGES.USE_DATE\' | translate}}"></ff-date> </label> </ff-row> <ff-row flex="{md: \'0 0 50%\'}"> <label flex="1 1 auto"> <ff-label flex="0 0 78px"><span translate=PURCHASE.CHARGES.NOTES></span></ff-label> <ff-text flex="1 1 1%" name=notes ff-model=product.notes></ff-text> </label> <ff-btn-group flex=none> <ff-btn sense=save size=sm type=submit ff-click="$ctrl.createCharge(chargeType, product)"> <span translate=PURCHASE.CHARGES.BTN_ADD></span> </ff-btn> </ff-btn-group> </ff-row> </div> </div> </form> </ff-panel> </div> </div> </div> '},Li7w:function(e,t){e.exports='<div class="purchase-list ff-grid" ff-bulk-read-only> <h1 class=page-title>{{state.getPageTitle()}}</h1> <div class="ff-grid gutter-v"> <ng-include src="\'securityDepositRecords\'"></ng-include> <ff-btn-group ng-if="$ctrl.purchases.length > 5"> <ff-btn sense=new ff-click=$ctrl.createPurchase()><span translate=PURCHASE.LIST.BTN_NEW></span></ff-btn> </ff-btn-group> <ff-panel ng-repeat="type in $ctrl.types" ng-if=type.orders.length> <ff-panel-header><span translate={{type.name}}></span></ff-panel-header> <ff-header> <ff-row> <cell flex="1 1 12%"><span translate=PURCHASE.LIST.ORDER_ID></span></cell> <cell flex="1 1 15%" class="ff-right show-sm"><span translate=PURCHASE.LIST.FIRST_OPENED></span></cell> <cell flex="1 1 15%" class="ff-right show-md"><span translate=PURCHASE.LIST.LAST_MODIFIED></span></cell> <cell flex="1 1 15%" class=ff-right><span translate=PURCHASE.LIST.PURCHASE_TOTAL></span></cell> <cell flex="1 1 12%" class="ff-right show-sm" ng-if=$ctrl.center.taxRates.length><span translate=PURCHASE.LIST.TAX_TOTAL></span></cell> <cell flex="1 1 15%" class="ff-right show-xs"><span translate=PURCHASE.LIST.PAYMENT_TOTAL></span></cell> <cell flex="1 1 15%" class=ff-right><span translate=PURCHASE.LIST.BALANCE_DUE></span></cell> <ff-btn-group flex="0 0 auto" class="buttons-row zero-height"> <ff-btn sense=view size=xs></ff-btn> <ff-btn sense=edit size=xs></ff-btn> </ff-btn-group> </ff-row> </ff-header> <ff-row ng-repeat="order in type.orders"> <ff-static flex="1 1 12%" ff-bind=order.id></ff-static> <ff-static flex="1 1 15%" class="ff-right show-sm" ff-bind="order.firstOpened | date:\'mediumDate\'"></ff-static> <ff-static flex="1 1 15%" class="ff-right show-md" ff-bind="order.lastModified | date:\'mediumDate\'"></ff-static> <ff-static flex="1 1 15%" class=ff-right ff-bind="order.chargesTotal | ncurrency"></ff-static> <ff-static flex="1 1 12%" class="ff-right show-sm" ff-bind="order.taxTotal | ncurrency" ng-if=$ctrl.center.taxRates.length></ff-static> <ff-static flex="1 1 15%" class="ff-right show-xs" ff-bind="order.paymentTotal | ncurrency"></ff-static> <ff-static flex="1 1 15%" class=ff-right ff-bind="order.balance | ncurrency"></ff-static> <ff-btn-group flex="0 0 auto" class=buttons-row> <ff-btn sense=view size=xs ff-click=$ctrl.viewPurchase(order) title="{{\'PURCHASE.LIST.BTN_VIEW\' | translate}}"></ff-btn> <ff-btn sense=edit size=xs ff-click=$ctrl.editPurchase(order) title="{{\'GLOBAL.BTN_EDIT\' | translate}}"></ff-btn> </ff-btn-group> </ff-row> </ff-panel> </div> <ff-btn-group class=buttons-bottom> <ff-btn sense=new ff-click=$ctrl.createPurchase()><span translate=PURCHASE.LIST.BTN_NEW></span></ff-btn> </ff-btn-group> </div> <script type=text/ng-template id=securityDepositRecords> <ff-panel ng-if="$resolve.securityDepositRecords.length > 0" class="animate-collapse">\n    <ff-panel-header style="margin-bottom: .5rem"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.HEADER"></span></ff-panel-header>\n    <ff-header>\n      <ff-row>\n        <cell flex="0 0 72px" class="ff-right"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.ORDER_NO"></span></cell>\n        <cell flex="1 0 95px" class="ff-right show-md"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.DATE"></span></cell>\n        <cell flex="1 0 72px" class="ff-right"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.CHARGED"></span></cell>\n        <cell flex="1 0 72px" class="ff-right"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.PAID"></span></cell>\n        <cell flex="1 0 72px" class="ff-right show-sm"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.USED"></span></cell>\n        <cell flex="1 0 72px" class="ff-right show-sm"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.REFUND"></span></cell>\n        <cell flex="1 0 72px" class="ff-right"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.BALANCE"></span></cell>\n        <cell flex="2 1 250px" class="show-lg"><span translate="PURCHASE.SECURITY_DEPOSIT_RECORDS.DESCRIPTION"></span></cell>\n      </ff-row>\n    </ff-header>\n\n    <ff-row ng-repeat="rec in $resolve.securityDepositRecords">\n      <ff-static flex="0 0 72px" class="ff-right">{{::rec.orderId}}</ff-static>\n      <ff-static flex="1 0 95px" class="ff-right show-md">{{::rec.date | date:\'mediumDate\'}}</ff-static>\n      <ff-static flex="1 0 72px" class="ff-right">{{::rec.charged | ncurrency | nd}}</ff-static>\n      <ff-static flex="1 0 72px" class="ff-right">{{::rec.paid | ncurrency | nd}}</ff-static>\n      <ff-static flex="1 0 72px" class="ff-right show-sm">{{::rec.used | ncurrency | nd}}</ff-static>\n      <ff-static flex="1 0 72px" class="ff-right show-sm">{{::rec.refund | ncurrency | nd}}</ff-static>\n      <ff-static flex="1 0 72px" class="ff-right">{{::rec.balance | ncurrency | nd}}</ff-static>\n      <ff-static flex="2 1 250px" class="show-lg">{{::rec.description | nd}}</ff-static>\n    </ff-row>\n  </ff-panel> <\/script> '},"PdZ/":function(e,t,r){"use strict";r.r(t);r("JBxO"),r("FdtR");var n=r("WSeP"),a=r.n(n);angular.module("deskworks.billing.recurringCharge.list",["deskworks.recurringCharge.service"]).config(["$routeProvider",function(e){e.when("/recurring-charges",{templateUrl:"billing/recurring-billing/recurring-list.tpl.html",controller:"RecurringChargeListCtrl as $ctrl",label:"Recurring Billing",routeBranch:"recurring-charges",translations:["recurring-billing"],resolve:{charges:["dwAlerts","recurringChargeService","state","routeHelper",function(e,t,r,n){return n.auth().then((function(){return n.selectUser().then((function(){return t.query(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to query recurring charges.")}))}))}))}],user:["dwAlerts","userProfileService","state","routeHelper","resolveTimezone",function(e,t,r,n,a){return n.auth().then((function(){return n.selectUser()})).then((function(){return a()})).then((function(){return t.get(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to get user profile.")}))}))}]}})}]).controller("RecurringChargeListCtrl",["$scope","$translate","dwAlerts","recurringChargeService","user","charges","state","helper",function(e,t,r,n,l,s,i,c){var f=this;f.charges=s,i.setPageTitle(t.instant("RECURRING_BILLING.LIST.PAGE_TITLE",{userName:l.fullNameCompany})),f.new=function(){return i.setPath("/recurring-charges/new/edit")},f.edit=function(e){return i.setPath("/recurring-charges/"+e.id+"/edit")},f.saveUseForCheckInBilling=function(e){var t;a()(t=f.charges).call(t,(function(t){t.useForCheckInBilling&&t!==e&&(t.useForCheckInBilling=!1)})),e.$spin=!0,n.setUseForCheckInBilling(i.getCurrentCenterId(),i.getCurrentUserId(),e.id).catch((function(e){return r.error(e,'Failed to set "Use for Check-In Billing".')})).finally((function(){e.$spin=!1}))}}])},Spb0:function(e,t){e.exports='<ff-panel style="margin:1.5rem 0"> <ff-panel-header><span translate=PURCHASE.AUDIT.HEADER></span></ff-panel-header> <div ng-if="!$ctrl.entries.length && !$ctrl.fetching" class=animate-collapse> <span translate=GLOBAL.NONE></span> </div> <ff-header ng-if=$ctrl.entries.length class=animate-collapse> <ff-row> <cell flex="4 0 40px" class="invoice-date ff-center"><span translate=PURCHASE.INVOICE.DATE></span></cell> <cell flex="4 1 40px" class="invoice-date-created ff-center show-lg"><span translate=PURCHASE.INVOICE.DATE_CREATED></span></cell> <cell flex="4 1 40px" class="invoice-added-by ff-center show-lg"><span translate=PURCHASE.INVOICE.ADDED_BY></span></cell> <cell flex="4 0 70px" class=invoice-product><span translate=PURCHASE.INVOICE.PRODUCT></span></cell> <cell flex="10 1 100px" class="invoice-description show-md"><span translate=PURCHASE.INVOICE.DESCRIPTION></span></cell> <cell flex="0 0 46px" class="invoice-quantity ff-center show-sm"><span translate=PURCHASE.INVOICE.QUANTITY></span></cell> <cell flex="0 0 80px" class="invoice-price ff-right show-sm"><span translate=PURCHASE.INVOICE.PRICE></span></cell> <cell flex="0 0 80px" class="invoice-amount ff-right"><span translate=PURCHASE.INVOICE.AMOUNT></span></cell> </ff-row> </ff-header> <ff-col infinite-scroll=$ctrl.fetch() infinite-scroll-distance=2 infinite-scroll-container="\'.snap-content-scroller\'"> <div ng-repeat="entry in $ctrl.entries" class=animate-collapse> <ff-row> <ff-label class=standout><span> {{entry.createdAt | date:\'mediumDate\'}} <span nice-time=entry.createdAt></span>, item deleted by {{entry.createdBy}} </span></ff-label> </ff-row> <ff-row> <ff-static flex="4 0 40px" class="invoice-date ff-center" ff-bind="::entry.itemDeleted.billedAt | date:\'mediumDate\'"></ff-static> <ff-static flex="4 1 40px" class="invoice-date-created ff-center show-lg" ff-bind="::entry.itemDeleted.addedAt | date:\'mediumDate\'"></ff-static> <ff-static flex="4 1 40px" class="invoice-added-by ff-center show-lg" ff-bind=::entry.itemDeleted.addedBy></ff-static> <ff-static flex="4 0 70px" class=invoice-product ff-bind=::entry.itemDeleted.name></ff-static> <ff-static flex="10 1 100px" class="invoice-description show-md" ff-bind=::entry.itemDeleted.description></ff-static> <ff-static flex="0 0 46px" class="invoice-quantity ff-center show-sm" ff-bind="::entry.itemDeleted.quantity | round"></ff-static> <ff-static flex="0 0 80px" class="invoice-price ff-right show-sm" ff-bind="::entry.itemDeleted.price | ncurrency"></ff-static> <ff-static flex="0 0 80px" class="invoice-amount ff-right" ff-bind="::entry.itemDeleted.amount | ncurrency"></ff-static> </ff-row> </div> </ff-col> <ff-row ff-dim=true ng-if=$ctrl.fetching class=animate-collapse><ff-static></ff-static></ff-row> </ff-panel> '},Y8yu:function(e,t,r){"use strict";r.r(t);r("JBxO"),r("FdtR"),r("U00V");var n=r("hsT8"),a=r.n(n),l=r("yCd9"),s=r.n(l),i=r("WSeP"),c=r.n(i),f=r("aqBv"),o=r.n(f),u=r("6RpP"),d=r.n(u),p=r("+l1P");angular.module("deskworks.recurringChargeAudit",["deskworks.helper","deskworks.RecurringChargeAudit",p.a.name]).directive("recurringChargeAudit",(function(){return{restrict:"E",scope:!0,templateUrl:"billing/recurring-billing/recurring-charge-audit.tpl.html",controller:"RecurringChargeAuditCtrl as $ctrl",bindToController:{priceListProducts:"<",reservationUnits:"<",recurringChargeId:"<"}}})).controller("RecurringChargeAuditCtrl",["state","dwAlerts","RecurringChargeAudit",function(e,t,r){var n=this;n.$onInit=function(){n.props=r.getProps(),n.centerId=e.getCurrentCenterId(),n.userId=e.getCurrentUserId(),n.offset=0,n.limit=20,n.entries=[],n.fetch()},n.fetch=function(){if(n.eof||n.fetching)return n.fetching;n.fetching=r.query(n.centerId,n.userId,n.recurringChargeId,n.offset,n.limit).catch((function(e){return t.error(e,"Failed to query audit log.")})).finally((function(){n.fetching=null})).then((function(e){var t;n.entries=d()(t=o()(n)).call(t,function(e){return c()(e).call(e,(function(e){var t,r;e.props||(e.props=s()(t=a()(r=n.props).call(r,(function(t){return e[t.id]}))).call(t,(function(t){return{name:t.name,old:a()(t)?a()(t).call(t,e[t.id].old,n):e[t.id].old,new:a()(t)?a()(t).call(t,e[t.id].new,n):e[t.id].new}})))})),e}(e)),n.offset+=e.length,n.eof=e.length<n.limit}))}}])},aUi0:function(e,t,r){"use strict";r.r(t);var n=r("WSeP"),a=r.n(n),l=r("nbuU"),s=r.n(l);r("w7o6");t.default=angular.module("deskworks.dwAddCharges",["ngRoute","deskworks.helper","deskworks.state","deskworks.purchase.service"]).directive("dwAddCharges",(function(){return{restrict:"EAC",scope:!0,templateUrl:"billing/purchase/dw-add-charges.tpl.html",controller:"dwAddChargesCtrl as $ctrl",bindToController:{purchase:"<",updateInvoice:"&",userPriceList:"<",noCollapse:"<"}}})).controller("dwAddChargesCtrl",["$scope","$filter","$route","$translate","dwAlerts","helper","state","purchaseService",function(e,t,r,n,l,i,c,f){var o=this;o.collapsed={},o.$onInit=function(){},o.$onChanges=function(){var e;(o.purchase&&o.purchase.options&&c.isLoggedAdmin()&&!s()(i).call(i,o.purchase.options.chargeTypes,"custom")&&o.purchase.options.chargeTypes.push({id:"custom",name:n.instant("PURCHASE.CHARGES.CUSTOM"),packages:[{name:n.instant("PURCHASE.CHARGES.CUSTOM"),price:"0.0"}]}),o.purchase&&o.purchase.options)&&a()(e=o.purchase.options.chargeTypes).call(e,(function(e){var t;a()(t=e.packages).call(t,(function(e){e.chargedAt=moment(),e.quantity=1,e.notes=""}))}))},o.createCharge=function(e,n){if(!i.pointFirstInvalid("#product"+n.id)){var a={chargedAt:t("date")(n.chargedAt,"yyyy-MM-dd"),notes:n.notes,quantity:n.quantity};return"custom"===e.id?(a.packageName=n.name,a.price=n.price,a.isTaxable=n.isTaxable):a.packageId=n.id,f.createCharge(c.getCurrentCenterId(),c.getCurrentUserId(),o.purchase.id,a,"custom"===e.id,!!r.current.params.productId,r.current.params.productId).catch((function(e){return l.error(e,"Failed to add charge.")})).then((function(){return o.updateInvoice()}))}}}])},goIx:function(e,t,r){"use strict";r.r(t);r("JBxO"),r("FdtR"),r("U00V");var n=r("+l1P");t.default=angular.module("deskworks.purchaseAuditDirective",["deskworks.helper","deskworks.PurchaseAudit",n.a.name]).directive("purchaseAudit",(function(){return{templateUrl:"billing/purchase/audit/purchase-audit.tpl.html",restrict:"E",scope:!0,controller:"PurchaseAuditCtrl as $ctrl",bindToController:{purchaseId:"<"}}})).controller("PurchaseAuditCtrl",["$scope","state","dwAlerts","PurchaseAudit",function(e,t,r,n){var a=this;a.$onInit=function(){a.centerId=t.getCurrentCenterId(),a.userId=t.getCurrentUserId(),a.offset=0,a.limit=100,a.entries=[],a.fetch()},a.fetch=function(){if(a.eof||a.fetching)return a.fetching;a.fetching=n.query({centerId:a.centerId,userId:a.userId,purchaseId:a.purchaseId,offset:a.offset,limit:a.limit}).catch((function(e){return r.error(e,"Failed to query audit log.")})).finally((function(){a.fetching=null})).then((function(e){a.entries=e,a.offset+=e.length,a.eof=e.length<a.limit}))},e.$on("purchase:update",(function(){a.eof=!1,a.fetch()}))}])},ixwX:function(e,t,r){"use strict";r.r(t);var n=r("nbuU"),a=r.n(n),l=r("WSeP"),s=r.n(l),i=r("hsT8"),c=r.n(i);angular.module("deskworks.members.billingProfile.edit",["ngRoute","deskworks.routeHelper","deskworks.userProfile.service","deskworks.purchase.service","deskworks.setup.service"]).config(["$routeProvider",function(e){e.when("/billing-profiles",{templateUrl:"billing/billing-profile/billing-profile-edit.tpl.html",controller:"BillingProfileEditCtrl as vm",label:"Billing Profile",routeBranch:"billing-profiles",translations:["billing-profile","user-profile"],resolve:{reg:function(){},userProfile:["dwAlerts","userProfileService","state","routeHelper","resolveTimezone",function(e,t,r,n,a){return n.auth().then((function(){return n.selectUser()})).then((function(){return a()})).then((function(){return t.get(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to load billing profile.")}))}))}],settings:["dwAlerts","setupService",function(e,t){return t.getSetupSettings().catch((function(t){return e.error(t,"Failed to load setup settings.")}))}]}}).when("/new-user/:userId/membership/billing-profile",{templateUrl:"billing/billing-profile/billing-profile-edit.tpl.html",controller:"BillingProfileEditCtrl",controllerAs:"vm",label:"Billing Profile",routeBranch:"new-user",translations:["billing-profile","user-profile"],resolve:{reg:function(){return{member:!1,selfRegistration:!1,step:2,stepCount:2}},userProfile:["dwAlerts","$route","state","userProfileService","routeHelper","resolveTimezone",function(e,t,r,n,a,l){return a.auth().then((function(){return a.selectUser()})).then((function(){return l()})).then((function(){return n.get(r.getCurrentCenterId(),t.current.params.userId).catch((function(t){return e.error(t,"Failed to get user profile.")}))}))}],settings:["dwAlerts","setupService",function(e,t){return t.getSetupSettings().catch((function(t){return e.error(t,"Failed to load setup settings.")}))}]}}).when("/new-member/:userId/membership/billing-profile",{templateUrl:"billing/billing-profile/billing-profile-edit.tpl.html",controller:"BillingProfileEditCtrl",controllerAs:"vm",label:"Billing Profile",routeBranch:"new-member",translations:["billing-profile","user-profile"],resolve:{reg:function(){return{member:!0,selfRegistration:!1,step:2,stepCount:3}},userProfile:["dwAlerts","$route","state","userProfileService","routeHelper","resolveTimezone",function(e,t,r,n,a,l){return a.auth().then((function(){return a.selectUser()})).then((function(){return l()})).then((function(){return n.get(r.getCurrentCenterId(),t.current.params.userId).catch((function(t){return e.error(t,"Failed to load billing profile.")}))}))}],settings:["dwAlerts","setupService",function(e,t){return t.getSetupSettings().catch((function(t){return e.error(t,"Failed to load setup settings.")}))}]}})}]).controller("BillingProfileEditCtrl",["$scope","$translate","$q","dwAlerts","state","helper","reg","userProfile","settings","userProfileService","purchaseService",function(e,t,r,n,l,i,f,o,u,d,p){var g,h,m=this;if(m.reg=f,m.userProfile=o,m.settings=u,u.creditCardTypes=c()(g=u.creditCardTypes).call(g,(function(e){return e.enable})),s()(h=m.userProfile.creditCards).call(h,(function(e){e.type=a()(i).call(i,u.creditCardTypes,e.type)||e.type||{}})),m.userProfile.creditCards=m.userProfile.creditCards||[],f&&!m.userProfile.creditCards.length&&!m.userProfile.eChecks.length){var I=d.creditCard.new(m.userProfile);I.type=u.creditCardTypes[0],m.userProfile.creditCards.push(I)}l.setPageTitle(t.instant("BILLING_PROFILE.PAGE_TITLE",{userName:m.userProfile.fullNameCompany})),m.next=function(e){if((e=e||{}).skipBillingProfile||!i.pointFirstInvalid("#billingProfile")){var t=r.when();return e.skipBillingProfile?"emailInvoice"!==m.userProfile.billingMethod&&"paperInvoice"!==m.userProfile.billingMethod||(t=d.saveBillingMethod(l.getCurrentCenterId(),m.userProfile)):t=d.saveBillingProfile(l.getCurrentCenterId(),m.userProfile),t.then((function(){if(!m.reg||m.reg.member)return p.createPurchase(l.getCurrentCenterId(),m.userProfile.id,!0,+l.getParam("productId"),l.getParam("attachedReservationUnitId"),l.getParam("membershipStartDate")).catch((function(e){return n.error(e,"Failed to create purchase.")})).then((function(e){return l.setPath(l.getPath()+"/purchase/"+e.id)}));m.complete=!0}))}},m.back=l.back,d.bindTestBillingGenerator(e,m.userProfile,m.reg)}])},kL89:function(e,t,r){"use strict";r.r(t),t.default=angular.module("deskworks.purchasePaymentTypes",["deskworks.purchase.service","deskworks.optsPaymentBillingMethod","deskworks.optsRefundBillingMethod"]).factory("purchasePaymentTypes",["dwAlerts","purchaseService","optsPaymentBillingMethod","optsRefundBillingMethod",function(e,t,r,n){return{payment:{hasProcessingFee:!0,optsBillingMethod:r,header:"PURCHASE.PAYMENT.HEADER",negativeAmount:"PURCHASE.PAYMENT.AMOUNT.NEGATIVE",btnSubmit:"PURCHASE.PAYMENT.BTN_SUBMIT",btnRecord:"PURCHASE.PAYMENT.BTN_RECORD",hintSubmit:"PURCHASE.PAYMENT.HINT_SUBMIT",hintRecord:"PURCHASE.PAYMENT.HINT_RECORD",securityDepositHint:"PURCHASE.PAYMENT.SECURITY_DEPOSIT.HINT_RECORD",submit:function(){return t.createPayment.apply(t,arguments).catch((function(t){return e.error(t,"Failed to make payment.")}))}},deposit:{hasProcessingFee:!0,header:"PURCHASE.DEPOSIT.HEADER",negativeAmount:"PURCHASE.PAYMENT.AMOUNT.NEGATIVE",btnSubmit:"PURCHASE.DEPOSIT.BTN_SUBMIT",btnRecord:"PURCHASE.DEPOSIT.BTN_RECORD",hintSubmit:"PURCHASE.DEPOSIT.HINT_SUBMIT",hintRecord:"PURCHASE.DEPOSIT.HINT_RECORD",submit:function(){return t.createDeposit.apply(t,arguments).catch((function(t){return e.error(t,"Failed to make deposit.")}))}},discount:{hasProcessingFee:!1,header:"PURCHASE.DISCOUNT.HEADER",negativeAmount:"PURCHASE.DISCOUNT.AMOUNT.NEGATIVE",btnSubmit:"PURCHASE.DISCOUNT.BTN_SUBMIT",btnRecord:"PURCHASE.DISCOUNT.BTN_RECORD",submit:function(){return t.createDiscount.apply(t,arguments).catch((function(t){return e.error(t,"Failed to make discount.")}))}},refund:{hasProcessingFee:!1,optsBillingMethod:n,header:"PURCHASE.REFUND.HEADER",negativeAmount:"PURCHASE.REFUND.AMOUNT.NEGATIVE",btnSubmit:"PURCHASE.REFUND.BTN_SUBMIT",btnRecord:"PURCHASE.REFUND.BTN_RECORD",hintSubmit:"PURCHASE.REFUND.HINT_SUBMIT",hintRecord:"PURCHASE.REFUND.HINT_RECORD",submit:function(){return t.createRefund.apply(t,arguments).catch((function(t){return e.error(t,"Failed to make refund.")}))}}}}])},laxG:function(e,t){e.exports='<div id=billingProfile ff-bulk-read-only> <h1 class=page-title>{{state.getPageTitle()}}</h1> <div class="ff-grid gutter-v"> <ff-panel ng-if=vm.complete> <span translate=BILLING_PROFILE.REGISTRATION.COMPLETE translate-values="{ userName: vm.userProfile.fullNameCompany }"></span> </ff-panel> <up-billing-method user=vm.userProfile reg=vm.reg settings=vm.settings ng-if=!vm.complete auto-save=!vm.reg new-payment-methods=!!vm.reg></up-billing-method> <up-credit-cards user-profile=vm.userProfile reg=vm.reg settings=vm.settings ng-if=!vm.complete></up-credit-cards> <up-e-checks user-profile=vm.userProfile reg=vm.reg ng-if="!vm.complete && vm.settings.enableEChecks"></up-e-checks> </div> <ff-btn-group class=buttons-bottom ng-if="vm.reg && !vm.complete"> <ff-btn sense=next ng-if="vm.reg && !vm.reg.selfRegistration" ff-click="vm.next({ skipBillingProfile: true })"> <span translate=BILLING_PROFILE.REGISTRATION.SKIP_BILLING></span> </ff-btn> <ff-btn sense=back ff-click=vm.back()><span translate=GLOBAL.BTN_BACK></span></ff-btn> <ff-btn sense=next ng-if=vm.reg ff-click=vm.next()><span translate=GLOBAL.BTN_NEXT></span></ff-btn> </ff-btn-group> </div> '},mUYq:function(e,t,r){"use strict";r.r(t),t.default=angular.module("deskworks.PurchaseAudit",["ngResource","datesDeserializer","deskworks.config"]).factory("PurchaseAudit",["$resource","$timeout","deskworksConfig","datesDeserializer",function(e,t,r,n){var a=n(["createdAt","itemDeleted.billedAt","itemDeleted.addedAt"]),l=e(r.getApiAbsUrl("/centers/:centerId/user-profiles/:userId/purchases/:purchaseId/audit"),{},{query:{method:"GET",isArray:!0,transformResponse:[angular.fromJson,a]}});return{query:function(e){return l.query(e).$promise}}}])},qPMi:function(e,t){e.exports='<form name=chargeForm class=recurring-charges id=recurringCharge ff-bulk-read-only> <h1 class=page-title>{{state.getPageTitle()}}</h1> <div class="ff-grid gutter-v gutter-h"> <ff-panel flex="{md: \'0 0 50%\'}"> <ff-panel-header><span translate=RECURRING_BILLING.GENERAL.HEADER></span></ff-panel-header> <label class=ff-row> <ff-label flex="0 0 126px"><req translate=RECURRING_BILLING.GENERAL.BILLING_FREQUENCY></req></ff-label> <ff-select ff-model=$ctrl.charge.billingFrequency ff-required=true name=billingFrequency ff-validate-alert="{{\'RECURRING_BILLING.GENERAL.BILLING_FREQUENCY\' | translate}}" ff-options="freq.name for freq in $ctrl.billingFrequencies" ff-change=$ctrl.billingFrequencyChange()> </ff-select> </label> <label class=ff-row> <ff-label flex="0 0 126px"><req translate=RECURRING_BILLING.GENERAL.PRODUCT></req></ff-label> <ff-select ff-model=$ctrl.charge.priceListProduct ff-required=true name=priceListProduct ff-validate-alert="{{\'RECURRING_BILLING.GENERAL.PRODUCT\' | translate}}" ff-options="priceListProduct.productName for priceListProduct in $ctrl.billingFrequencyProducts[$ctrl.charge.billingFrequency.id]"> </ff-select> </label> <label class=ff-row> <ff-label flex="0 0 126px"> <span> <span translate=RECURRING_BILLING.GENERAL.CUSTOM_PRICE></span> <ff-hint hint-type=primary><span translate=RECURRING_BILLING.GENERAL.CUSTOM_PRICE.HINT></span></ff-hint> </span> </ff-label> <ff-number ff-model=$ctrl.charge.customPrice name=customPrice ff-validate-alert="{{\'RECURRING_BILLING.GENERAL.CUSTOM_PRICE\' | translate}}"></ff-number> </label> <label class=ff-row> <ff-label flex="0 0 126px"><span translate=RECURRING_BILLING.GENERAL.PRICE_LIST></span></ff-label> <ff-static>{{$ctrl.charge.priceListProduct.priceListName | nd}}</ff-static> </label> <label class=ff-row> <ff-label flex="0 0 126px"><span translate=RECURRING_BILLING.GENERAL.DESCRIPTION></span></ff-label> <ff-text ff-model=$ctrl.charge.description name=description ff-validate-alert="{{\'RECURRING_BILLING.GENERAL.DESCRIPTION\' | translate}}"></ff-text> </label> <label class=ff-row> <ff-label flex="0 0 126px"><req translate=RECURRING_BILLING.GENERAL.QUANTITY></req></ff-label> <ff-number name=quantity ff-model=$ctrl.charge.quantity ff-required=true ff-validate-alert="{{\'RECURRING_BILLING.GENERAL.QUANTITY\' | translate}}"></ff-number> </label> <ff-row> <ff-label flex="0 0 126px"><span translate=RECURRING_BILLING.GENERAL.INVOICE_SENT></span></ff-label> <ff-static ff-bind="::$ctrl.charge.invoiceSent | yesno" name=invoiceSent></ff-static> </ff-row> <label class=ff-row ng-if="!$ctrl.charge.id && $resolve.settings.prorateAtStart && $ctrl.charge.billingFrequency.id === \'monthly\'"> <ff-label flex="0 0 126px"><span translate=RECURRING_BILLING.GENERAL.POST_PRO_RATION></span></ff-label> <ff-label> <ff-checkbox name=postProration ff-model=$ctrl.charge.postProration></ff-checkbox> </ff-label> </label> <label class=ff-row> <ff-label flex="0 0 126px"> <span> <span translate=RECURRING_BILLING.GENERAL.ATTACHED_RES_UNIT></span> <ff-hint><span translate=RECURRING_BILLING.GENERAL.ATTACHED_RES_UNIT.HINT></span></ff-hint> </span> </ff-label> <ff-select ff-model=$ctrl.charge.attachedReservationUnitId name=attachedReservationUnit> <option translate=GLOBAL.NONE></option> <option ng-repeat="resUnit in $ctrl.reservationUnits" ng-value=resUnit.id>{{resUnit.name}}</option> </ff-select> </label> <ff-row ng-if="$ctrl.charge.billingFrequency.id === \'asNeeded\'"> <label flex="1 1 auto"> <ff-label flex="0 0 126px"><req translate=RECURRING_BILLING.DATES.PASS_BALANCE></req></ff-label> <ff-number flex="1 1 1%" name=passBalance ff-model=$ctrl.charge.passBalance ff-required=true ff-validate-alert="{{\'RECURRING_BILLING.DATES.PASS_BALANCE\' | translate}}"></ff-number> </label> <ff-btn-group flex="0 0 auto" ng-if=$ctrl.charge.id style=z-index:3> <ff-btn sense=ok size=sm ff-click=$ctrl.saveCharge(true)> <span translate=RECURRING_BILLING.DATES.BTN_REFILL></span> </ff-btn> </ff-btn-group> </ff-row> </ff-panel> <ff-panel flex="{md: \'0 0 50%\'}"> <ff-panel-header><span translate=RECURRING_BILLING.DATES.HEADER></span></ff-panel-header> <ff-header><span translate=RECURRING_BILLING.DATES.BILLING_DATES></span></ff-header> <label class=ff-row> <ff-label flex="0 0 126px" ff-required=true> <span translate=RECURRING_BILLING.DATES.LAST_BILL_DATE></span> </ff-label> <ff-date ff-model=$ctrl.charge.lastBillDate ff-required=true name=lastBillDate ff-validate-alert="{{\'RECURRING_BILLING.DATES.LAST_BILL_DATE\' | translate}}"></ff-date> </label> <label class=ff-row ng-if="$ctrl.charge.billingFrequency.id !== \'asNeeded\'"> <ff-label flex="0 0 126px" ff-required={{!$ctrl.isNextBillDateDisabled()}} ng-disabled=$ctrl.isNextBillDateDisabled()> <span translate=RECURRING_BILLING.DATES.NEXT_BILL_DATE></span> </ff-label> <ff-date ff-model=$ctrl.charge.nextBillDate ff-required=true name=nextBillDate ng-if=!$ctrl.isNextBillDateDisabled() ff-validate-alert="{{\'RECURRING_BILLING.DATES.NEXT_BILL_DATE\' | translate}}"></ff-date> <ff-static ff-disabled=true ng-if=$ctrl.isNextBillDateDisabled()>-</ff-static> </label> <label class=ff-row> <ff-label flex="0 0 126px"><span translate=RECURRING_BILLING.DATES.ENTRY_DATE></span></ff-label> <ff-static name=entryDate ff-bind="$ctrl.charge.entryDate | date:\'mediumDate\'"></ff-static> </label> <label class=ff-row> <ff-label flex="0 0 126px"> <span> <req translate=RECURRING_BILLING.DATES.START_DATE></req> <ff-hint><span translate=RECURRING_BILLING.DATES.START_DATE.HINT></span></ff-hint> </span> </ff-label> <ff-date name=startDate ff-model=$ctrl.charge.startDate ff-required=true ff-validate-alert="{{\'RECURRING_BILLING.DATES.START_DATE\' | translate}}"></ff-date> </label> <ff-header style=padding-top:.5rem><span translate=RECURRING_BILLING.DATES.NOTICE_DATES></span></ff-header> <label class=ff-row ng-if="$ctrl.charge.billingFrequency.id !== \'asNeeded\'"> <ff-label flex="0 0 126px"> <span> <span translate=RECURRING_BILLING.DATES.NOTICE_DATE></span> <ff-hint><span translate=RECURRING_BILLING.DATES.NOTICE_DATE.HINT></span></ff-hint> </span> </ff-label> <ff-date ff-model=$ctrl.charge.noticeDate name=noticeDate ff-change=$ctrl.calcTerminationDate() ff-validate-alert="{{\'RECURRING_BILLING.DATES.NOTICE_DATE\' | translate}}"></ff-date> </label> <label class=ff-row ng-if="$ctrl.charge.billingFrequency.id !== \'asNeeded\'" ng-show=$ctrl.charge.noticeDate> <ff-label flex="0 0 126px"><small translate=RECURRING_BILLING.DATES.NOTICE_DATE.ADDED_BY></small></ff-label> <ff-static ff-bind="$ctrl.charge.noticeDateAddedBy || (state.getLoggedUser().firstName + \' \' + state.getLoggedUser().lastName)"></ff-static> </label> <label class=ff-row> <ff-label flex="0 0 126px"> <span> <span translate=RECURRING_BILLING.DATES.NOTICE_PERIOD></span> <ff-hint><span translate=RECURRING_BILLING.DATES.NOTICE_PERIOD.HINT></span></ff-hint> </span> </ff-label> <ff-select name=noticePeriod ff-model=$ctrl.charge.noticePeriod ff-options="period.name for period in $ctrl.noticePeriods" ff-change=$ctrl.calcTerminationDate() ff-validate-alert="{{\'RECURRING_BILLING.DATES.NOTICE_PERIOD\' | translate}}"> </ff-select> </label> <label class=ff-row ng-if=$resolve.settings.enableRenewalNotices> <ff-label flex="0 0 126px"> <span> <span translate=RECURRING_BILLING.DATES.NOTICE_REQUIRED_BY></span> <ff-hint><span translate=RECURRING_BILLING.DATES.NOTICE_REQUIRED_BY.HINT></span></ff-hint> </span> </ff-label> <ff-static ng-if="$ctrl.charge.renewalDate && $ctrl.charge.noticePeriod"> <span ng-bind="($ctrl.charge.renewalDate - $ctrl.charge.noticePeriod.id * 24 * 3600000) | date:\'mediumDate\'"></span> </ff-static> <ff-static ng-if="!$ctrl.charge.renewalDate || !$ctrl.charge.noticePeriod">-</ff-static> </label> <label class=ff-row> <ff-label flex="0 0 126px"> <span> <span translate=RECURRING_BILLING.DATES.TERMINATE></span> <ff-hint><span translate=RECURRING_BILLING.DATES.TERMINATE.HINT></span></ff-hint> </span> </ff-label> <ff-date name=terminate ff-model=$ctrl.charge.terminate ng-if="$ctrl.charge.billingFrequency.id !== \'asNeeded\'" ff-validate-alert="{{\'RECURRING_BILLING.DATES.TERMINATE\' | translate}}"></ff-date> <ff-select name=terminate ff-model=$ctrl.charge.terminate ng-if="$ctrl.charge.billingFrequency.id === \'asNeeded\'" ff-options="opt.name for opt in $ctrl.optsTerminate" ff-validate-alert="{{\'RECURRING_BILLING.DATES.TERMINATE\' | translate}}"></ff-select> </label> <div ng-if=$resolve.settings.enableRenewalNotices> <ff-header style=padding-top:.5rem><span translate=RECURRING_BILLING.DATES.RENEWAL_DATES></span></ff-header> <label class=ff-row> <ff-label flex="0 0 126px"> <span translate=RECURRING_BILLING.RENEWAL_DATE></span> </ff-label> <ff-date name=renewalDate ff-model=$ctrl.charge.renewalDate ff-validate-alert="{{\'RECURRING_BILLING.RENEWAL_DATE\' | translate}}"></ff-date> </label> <label class=ff-row> <ff-label flex="0 0 126px"> <span translate=RECURRING_BILLING.RENEWAL_TERM></span> </ff-label> <ff-select name=renewalTerm ff-model=$ctrl.charge.renewalTerm ff-required=true ff-options="opt.id as opt.name for opt in $ctrl.optsRenewalTerm" ff-validate-alert="{{\'RECURRING_BILLING.RENEWAL_TERM\' | translate}}"></ff-select> </label> <label class=ff-row> <ff-label flex="0 0 126px"> <span> <span translate=RECURRING_BILLING.RENEWAL_NOTICE_PERIOD></span> <ff-hint><span translate=RECURRING_BILLING.RENEWAL_NOTICE_PERIOD.HINT></span></ff-hint> </span> </ff-label> <ff-select name=renewalNoticePeriod ff-model=$ctrl.charge.renewalNoticePeriod ff-options="opt.id as opt.name for opt in $ctrl.optsRenewalNoticePeriod" ff-validate-alert="{{\'RECURRING_BILLING.RENEWAL_NOTICE_PERIOD\' | translate}}"></ff-select> </label> </div> </ff-panel> <ff-panel flex="{md: \'0 0 50%\'}"> <ff-panel-header><span translate=RECURRING_BILLING.DISCOUNT.HEADER></span></ff-panel-header> <label class=ff-row> <ff-label flex="0 0 126px"><span translate=RECURRING_BILLING.DISCOUNT.TYPE></span></ff-label> <ff-select ff-model=$ctrl.charge.discountType ff-required=true name=discountType ff-validate-alert="{{\'RECURRING_BILLING.DISCOUNT.TYPE\' | translate}}" ff-options="type.name for type in $ctrl.discountTypes"> </ff-select> </label> <label class=ff-row> <ff-label flex="0 0 126px" ng-disabled=!$ctrl.charge.discountType.id> <req translate=RECURRING_BILLING.DISCOUNT.VALUE></req> </ff-label> <ff-text ff-model=$ctrl.charge.discountValue name=discountValue ff-required=$ctrl.charge.discountType.id ff-disabled=!$ctrl.charge.discountType.id ff-validate-alert="{{\'RECURRING_BILLING.DISCOUNT.VALUE\' | translate}}"></ff-text> </label> <label class=ff-row> <ff-label flex="0 0 126px" ng-disabled=!$ctrl.charge.discountType.id> <req translate=RECURRING_BILLING.DISCOUNT.MONTHS></req> </ff-label> <ff-select ff-model=$ctrl.charge.discountTrialOccurrences name=discountTrialOccurrences ff-required=$ctrl.charge.discountType.id ff-validate-alert="{{\'RECURRING_BILLING.DISCOUNT.MONTHS\' | translate}}" ff-options="trial.name for trial in $ctrl.discountTrialOccurrences" ff-disabled=!$ctrl.charge.discountType.id> </ff-select> </label> <label class=ff-row> <ff-label flex="0 0 126px" ng-disabled=!$ctrl.charge.discountType.id> <req translate=RECURRING_BILLING.DISCOUNT.START_DATE></req> </ff-label> <ff-date ff-model=$ctrl.charge.discountStartDate ff-required=$ctrl.charge.discountType.id name=discountStartDate ff-disabled=!$ctrl.charge.discountType.id ff-validate-alert="{{\'RECURRING_BILLING.DISCOUNT.START_DATE\' | translate}}"></ff-date> </label> </ff-panel> <ff-panel flex="{md: \'0 0 50%\'}"> <ff-panel-header><span translate=RECURRING_BILLING.STATUS_NOTES.HEADER></span></ff-panel-header> <label class=ff-row> <ff-label flex="0 0 126px"> <span> <req translate=RECURRING_BILLING.STATUS_NOTES.STATUS></req> <ff-hint ng-if="$ctrl.charge.status.id === \'active\'"> <span translate=RECURRING_BILLING.STATUS_NOTES.STATUS.HINT></span> </ff-hint> <ff-hint hint-type=warning ng-if="$ctrl.charge.existOutstandingUsages && ($ctrl.charge.status.id === \'deleted\' || $ctrl.charge.status.id === \'inactive\')"> <span translate=RECURRING_BILLING.STATUS_NOTES.STATUS.WARNING></span> </ff-hint> </span> </ff-label> <ff-select ff-model=$ctrl.charge.status ff-required=true name=status ff-options="status.name for status in $ctrl.chargeStatuses" ff-validate-alert="{{\'RECURRING_BILLING.STATUS_NOTES.STATUS\' | translate}}" ff-change=$ctrl.onChangeStatus()> </ff-select> </label> <ff-static ng-if="$ctrl.activeChargesCount < 2 && $ctrl.initialStatus.id === \'active\' && ($ctrl.charge.status.id === \'inactive\' || $ctrl.charge.status.id === \'deleted\')"> <ff-col> <label> <ff-checkbox name=makeMemberInactive ff-model=$ctrl.charge.makeMemberInactive> <span translate=RECURRING_BILLING.STATUS_NOTES.INACTIVATE_MEMBER></span> </ff-checkbox> </label> <label> <ff-checkbox name=makeCoMembersInactive ff-model=$ctrl.charge.makeCoMembersInactive> <span translate=RECURRING_BILLING.STATUS_NOTES.INACTIVATE_CO_MEMBERS></span> </ff-checkbox> </label> </ff-col> </ff-static> <label class=ff-row> <ff-label flex="{xs: \'0 0 60px\', lg: \'0 0 126px\'}"> <span translate=RECURRING_BILLING.STATUS_NOTES.NOTES class=ff-flex-start style=padding-top:.5rem></span> </ff-label> <ff-textarea ff-model=$ctrl.charge.notes name=notes rowspan=3></ff-textarea> </label> </ff-panel> <ff-btn-group> <ff-btn sense=save ff-click=$ctrl.saveCharge() ff-disabled=chargeForm.$pristine> <span translate=GLOBAL.BTN_SAVE></span> </ff-btn> <ff-btn sense=back ff-click=$ctrl.backToList()><span translate=GLOBAL.BTN_BACK></span></ff-btn> <ff-btn sense=collapseBtn ng-if=$ctrl.charge.id ff-click="$ctrl.showAudit = !$ctrl.showAudit" ng-class="{ collapsed: !$ctrl.showAudit }"> <span translate=GLOBAL.BTN_AUDIT></span> </ff-btn> </ff-btn-group> </div> </form> <div ng-if=$ctrl.showAudit class=animate-collapse> <recurring-charge-audit price-list-products=$ctrl.charge.options.priceListProducts recurring-charge-id=$ctrl.charge.id reservation-units=$resolve.resUnits></recurring-charge-audit> </div> '},qoyf:function(e,t){e.exports='<div class=purchase ff-bulk-read-only> <h1 class=page-title>{{state.getPageTitle()}}</h1> <div class=gutter-v> <ff-panel> <ff-spin ng-if=$ctrl.orderSpin></ff-spin> <ff-panel-header ng-if=$ctrl.reg><span translate=GLOBAL.STEP_X_OF_Y translate-values=$ctrl.reg></span></ff-panel-header> <ff-header style=margin-bottom:.5rem> <div class="ff-grid gutter-v-half"> <div flex=none><span translate=PURCHASE.LIST.ORDER_ID></span>: {{$ctrl.purchase.orderId}}</div> <div flex=auto ng-if=$ctrl.showOrderDates> <div class="ff-grid purchase-dates"> <label flex="0 0 200px" class=ff-row> <ff-label flex="0 0 82px"><req translate=PURCHASE.INVOICE.BILL_DATE></req></ff-label> <ff-date name=billDate ff-model=$ctrl.purchase.billDate ff-change=$ctrl.onOrderDateChange() ff-required=true ff-validate-alert="{{ \'PURCHASE.INVOICE.BILL_DATE\' | translate }}"></ff-date> </label> <label flex="0 0 200px" class=ff-row> <ff-label flex="0 0 82px"><req translate=PURCHASE.INVOICE.DUE_DATE></req></ff-label> <ff-date name=dueDate ff-model=$ctrl.purchase.dueDate ff-change=$ctrl.onOrderDateChange() ff-required=true ff-validate-alert="{{ \'PURCHASE.INVOICE.DUE_DATE\' | translate }}"></ff-date> </label> </div> </div> </div> </ff-header> <dw-invoice invoice=$ctrl.purchase center=$ctrl.center update-invoice=$ctrl.updateInvoice()></dw-invoice> </ff-panel> <form name=formConsolidate ng-if="$ctrl.consolidations.length > 0"> <ff-panel> <ff-header><span translate=PURCHASE.CONSOLIDATE></span></ff-header> <ff-row class=gutter-h-half> <ff-select flex="0 0 120px" name=consolidation ff-model=$ctrl.consolidationId ff-options="opt.id as opt.orderId for opt in $ctrl.consolidations"></ff-select> <ff-btn flex=none type=submit sense=merge size=sm ff-click=$ctrl.consolidatePurchase($ctrl.consolidationId)> <span translate=PURCHASE.BTN_COMBINE></span> </ff-btn> </ff-row> </ff-panel> </form> <div ng-if=$ctrl.reg> <purchase-payment type=payment settings=$resolve.settings user=$resolve.user purchase-id=$ctrl.purchase.id update-invoice=$ctrl.update() default-amount=$ctrl.purchase.balance filter-billing-methods=$ctrl.filterBillingMethods></purchase-payment> </div> <div ng-if=!$ctrl.reg style=margin-bottom:.5rem> <div> <ff-btn sense=collapse ff-click="$ctrl.paymentCollapsed = !$ctrl.paymentCollapsed" class=dw-add-charges-collapse-btn ng-class="{ collapsed: !$ctrl.paymentCollapsed }"> <span translate=PURCHASE.PAYMENT.BTN_ADD></span> </ff-btn> <div ng-collapse=!$ctrl.paymentCollapsed> <purchase-payment type=payment settings=$resolve.settings user=$resolve.user purchase-id=$ctrl.purchase.id update-invoice=$ctrl.update() default-amount=$ctrl.purchase.balance filter-billing-methods=$ctrl.filterBillingMethods></purchase-payment> </div> </div> <div> <ff-btn sense=collapse ff-click="$ctrl.depositCollapsed = !$ctrl.depositCollapsed" class=dw-add-charges-collapse-btn ng-class="{ collapsed: !$ctrl.depositCollapsed }"> <span translate=PURCHASE.DEPOSIT.BTN_ADD></span> </ff-btn> <div ng-collapse=!$ctrl.depositCollapsed> <purchase-payment type=deposit settings=$resolve.settings user=$resolve.user purchase-id=$ctrl.purchase.id update-invoice=$ctrl.update()></purchase-payment> </div> </div> <div> <ff-btn sense=collapse ff-click="$ctrl.discountCollapsed = !$ctrl.discountCollapsed" class=dw-add-charges-collapse-btn ng-class="{ collapsed: !$ctrl.discountCollapsed }"> <span translate=PURCHASE.DISCOUNT.BTN_ADD></span> </ff-btn> <div ng-collapse=!$ctrl.discountCollapsed> <purchase-payment type=discount settings=$resolve.settings user=$resolve.user purchase-id=$ctrl.purchase.id update-invoice=$ctrl.updateInvoice()></purchase-payment> </div> </div> <div ng-if=$ctrl.allowRefundProcessing> <ff-btn sense=collapse ff-click="$ctrl.refundCollapsed = !$ctrl.refundCollapsed" class=dw-add-charges-collapse-btn ng-class="{ collapsed: !$ctrl.refundCollapsed }"> <span translate=PURCHASE.REFUND.BTN_ADD></span> </ff-btn> <div ng-collapse=!$ctrl.refundCollapsed> <purchase-payment type=refund settings=$resolve.settings user=$resolve.user purchase-id=$ctrl.purchase.id update-invoice=$ctrl.update() filter-billing-methods=$ctrl.filterBillingMethods></purchase-payment> </div> </div> </div> <dw-add-charges purchase=$ctrl.purchase update-invoice=$ctrl.update() user-price-list=$ctrl.userPriceList></dw-add-charges> <ff-btn-group class=buttons-bottom ng-if=!$ctrl.reg> <ff-btn sense=back ff-click=$ctrl.backToPurchases()><span translate=GLOBAL.BTN_BACK></span></ff-btn> <ff-btn sense=charge ng-if=$ctrl.isPaymentsAssignmentEnabled() ff-click=$ctrl.paymentAssignment()> <span translate=PAYMENTS_ASSIGNMENT.BTN_ASSIGN></span> </ff-btn> <ff-btn sense=collapseBtn ng-if="$ctrl.purchase.id && state.isLoggedAdmin()" ff-click="$ctrl.showAudit = !$ctrl.showAudit" ng-class="{ collapsed: !$ctrl.showAudit }"> <span translate=GLOBAL.BTN_AUDIT></span> </ff-btn> </ff-btn-group> </div> </div> <div ng-if=$ctrl.showAudit class=animate-collapse> <purchase-audit purchase-id=$ctrl.purchase.id></purchase-audit> </div> '},"uVw+":function(e,t){e.exports='<form name=$ctrl.form novalidate> <ff-panel class=ff-bmargin> <ff-header><span translate={{$ctrl.types[$ctrl.type].header}}></span></ff-header> <div class="ff-grid gutter-h-half"> <label flex="{md: \'0 0 50%\'}" class=ff-row> <ff-label flex="0 0 104px"><span translate=PURCHASE.PAYMENT.POST_DATE></span></ff-label> <ff-static>{{$ctrl.postDate | date}}</ff-static> </label> <label flex="{md: \'0 0 50%\'}" class=ff-row> <ff-label flex="0 0 104px"><req translate=PURCHASE.PAYMENT.RECEIVED_DATE></req></ff-label> <ff-date name=receivedAt ff-model=$ctrl.payment.receivedAt ff-required=true ff-validate-alert="{{\'PURCHASE.PAYMENT.RECEIVED_DATE\' | translate}}" ff-disabled="$ctrl.billingMethod.id === \'cc\' || $ctrl.billingMethod.paymentMethodKey"></ff-date> </label> <label flex="{md: \'0 0 50%\'}" class=ff-row> <ff-label flex="0 0 104px"><req translate=PURCHASE.PAYMENT.AMOUNT></req></ff-label> <ff-price flex="0 0 70px" name=amount ff-model=$ctrl.payment.amount ff-required=true ff-gt=0 ff-validate-alert="{ field: (\'PURCHASE.PAYMENT.AMOUNT\' | translate), gt: ($ctrl.types[$ctrl.type].negativeAmount | translate) }"></ff-price> <ff-label> <span ng-if=$ctrl.getAmountWithFee()> + {{$ctrl.settings.paymentProcessingRates[$ctrl.billingMethod.id]}}% <span translate=PURCHASE.PAYMENT_PROCESSING_FEE></span> = <strong>{{$ctrl.getAmountWithFee() | ncurrency}}</strong> </span> </ff-label> </label> <label flex="{md: \'0 0 50%\'}" class=ff-row> <ff-label flex="0 0 104px"><span translate=PURCHASE.PAYMENT.NOTES></span></ff-label> <ff-text name=notes ff-model=$ctrl.payment.notes ff-maxlength=256></ff-text> </label> <div class=payment-submit flex="{md: \'0 0 50%\'}"> <div class=ff-grid> <ff-btn flex="{sm: \'none\'}" sense=save size=sm type=submit ff-click=$ctrl.createPayment() ng-if="$ctrl.billingMethod.paymentMethodKey || $ctrl.billingMethod.forceSubmit"> <span translate={{$ctrl.types[$ctrl.type].btnSubmit}}></span> </ff-btn> <ff-btn flex="{sm: \'none\'}" sense=save size=sm type=submit ff-click=$ctrl.createPayment() ng-if="!$ctrl.billingMethod.paymentMethodKey && !$ctrl.billingMethod.forceSubmit"> <span translate={{$ctrl.types[$ctrl.type].btnRecord}}></span> </ff-btn> <div class=ff-grid flex=auto ng-if=$ctrl.types[$ctrl.type].optsBillingMethod> <label flex="{sm: \'1 0 70%\'}" class=ff-row> <span flex=none translate=PURCHASE.PAYMENT.USING></span> <ff-select flex="1 1 auto" name=billingMethod ff-model=$ctrl.billingMethod ff-options="method.name for method in $ctrl.types[$ctrl.type].optsBillingMethod | filter: $ctrl.filterBillingMethods" ff-required=true ff-validate-alert="{{\'BILLING_PROFILE.BILLING_METHOD\' | translate}}"></ff-select> </label> <ff-select flex="{sm: \'0 0 30%\'}" name=paymentMethod ng-if=$ctrl.billingMethod.paymentMethodKey ff-model=$ctrl.payment.paymentMethodId ff-options="m.id as (m.number.replace(\'XXXX-XXXX-XXXX\', \'*\') || [m.bankRoutingNumber, m.bankAccountNumber].join(\' / \')) for m in $ctrl.user[$ctrl.billingMethod.paymentMethodKey]" ff-required=true ff-validate-alert="{{\'BILLING_PROFILE.PAYMENT_METHOD\' | translate}}"> </ff-select> </div> </div> </div> <div flex="{md: \'0 0 50%\'}" class=payment-hint ng-if="$ctrl.types[$ctrl.type].hintSubmit || $ctrl.types[$ctrl.type].hintRecord"> <ff-static> <span> <ff-icon sense=info></ff-icon> <span translate="{{$ctrl.types[$ctrl.type][$ctrl.billingMethod.id + \'Hint\'] || $ctrl.types[$ctrl.type][$ctrl.billingMethod.paymentMethodKey || $ctrl.billingMethod.forceSubmit ? \'hintSubmit\' : \'hintRecord\']}}"></span> </span> </ff-static> </div> </div> </ff-panel> </form> '},uiPC:function(e,t,r){"use strict";r.r(t);var n=r("WSeP"),a=r.n(n),l=r("nbuU"),s=r.n(l);angular.module("deskworks.RecurringChargeAudit",["ngResource","datesDeserializer","deskworks.config","deskworks.billing.optsBillingFrequency","deskworks.billing.optsRecurringChargeStatus","deskworks.billing.optsNoticePeriod","deskworks.billing.optsDiscountType","deskworks.userProfile.optsMonthsOfDiscount","deskworks.billing.optsRecurringChargeTerminate","deskworks.billing.optsRenewalTerm","deskworks.billing.optsRenewalNoticePeriod"]).factory("RecurringChargeAudit",["$resource","$q","$timeout","$filter","$rootScope","$translate","deskworksConfig","helper","datesDeserializer","optsBillingFrequency","optsRecurringChargeStatus","optsNoticePeriod","optsDiscountType","optsMonthsOfDiscount","optsRecurringChargeTerminate","optsRenewalTerm","optsRenewalNoticePeriod",function(e,t,r,n,l,i,c,f,o,u,d,p,g,h,m,I,R){var E=function(e){return n("date")(e,"mediumDate")},b=function(e,t){return t=t||"name",angular.isString(e)?function(r,n){return(s()(f).call(f,n[e],r)||{})[t]||"-"}:function(r,n){return(s()(f).call(f,e,r)||{})[t]||"-"}},C=[{id:"priceListProductId",_name:"RECURRING_BILLING.GENERAL.PRODUCT",filter:b("priceListProducts","productName")},{id:"description",_name:"RECURRING_BILLING.GENERAL.DESCRIPTION"},{id:"quantity",_name:"RECURRING_BILLING.GENERAL.QUANTITY"},{id:"attachedReservationUnitId",_name:"RECURRING_BILLING.GENERAL.ATTACHED_RES_UNIT",filter:b("reservationUnits")},{id:"passBalance",_name:"RECURRING_BILLING.GENERAL.PASS_BALANCE"},{id:"invoiceSent",_name:"RECURRING_BILLING.GENERAL.INVOICE_SENT",filter:function(e){return n("yesno")(e)}},{id:"lastBillDate",_name:"RECURRING_BILLING.DATES.LAST_BILL_DATE",filter:E},{id:"nextBillDate",_name:"RECURRING_BILLING.DATES.NEXT_BILL_DATE",filter:E},{id:"startDate",_name:"RECURRING_BILLING.DATES.START_DATE",filter:E},{id:"noticeDate",_name:"RECURRING_BILLING.DATES.NOTICE_DATE",filter:E},{id:"noticePeriod",_name:"RECURRING_BILLING.DATES.NOTICE_PERIOD",filter:b(p)},{id:"terminate",_name:"RECURRING_BILLING.DATES.TERMINATE",filter:function(e,t){return(s()(f).call(f,m,e)||{}).name||E(e)||"-"}},{id:"renewalDate",_name:"RECURRING_BILLING.RENEWAL_DATE",filter:E},{id:"renewalTerm",_name:"RECURRING_BILLING.RENEWAL_TERM",filter:b(I)},{id:"renewalNoticePeriod",_name:"RECURRING_BILLING.RENEWAL_NOTICE_PERIOD",filter:b(R)},{id:"discountTypeId",_name:"RECURRING_BILLING.DISCOUNT.TYPE",filter:b(g)},{id:"discountValue",_name:"RECURRING_BILLING.DISCOUNT.VALUE"},{id:"discountTrialOccurrences",_name:"RECURRING_BILLING.DISCOUNT.MONTHS",filter:b(h)},{id:"discountStartDate",_name:"RECURRING_BILLING.DISCOUNT.START_DATE",filter:E},{id:"status",_name:"RECURRING_BILLING.STATUS_NOTES.STATUS",filter:b(d)},{id:"notes",_name:"RECURRING_BILLING.STATUS_NOTES.NOTES"}];function T(){a()(C).call(C,(function(e){e.name=i.instant(e._name)}))}T(),l.$on("$setTranslationsSuccess",T);var N=o(["createdAt","lastBillDate.old","lastBillDate.new","nextBillDate.old","nextBillDate.new","startDate.old","startDate.new","noticeDate.old","noticeDate.new","renewalDate.old","renewalDate.new","discountStartDate.old","discountStartDate.new","terminate.old","terminate.new"]),A=e(c.getApiAbsUrl("/centers/:centerId/user-profiles/:userId/recurring-charges/:recurringId/audit"),{},{query:{method:"GET",isArray:!0,transformResponse:[angular.fromJson,N]}});return{query:function(e,t,r,n,a){return A.query({centerId:e,userId:t,recurringId:r,offset:n,limit:a}).$promise},getProps:function(){return C}}}])},vw9M:function(e,t,r){"use strict";r.r(t);r("JBxO"),r("FdtR");var n=r("65r6"),a=r.n(n),l=r("nbuU"),s=r.n(l),i=r("ipr/"),c=r.n(i),f=r("03wM"),o=r.n(f),u=r("uQX1"),d=r.n(u),p=(r("53Pq"),r("2/1H")),g=r("yjMN"),h=r("Vtxe"),m=r("kYjL");t.default=angular.module("deskworks.billing.purchase.edit",["ngRoute",m.a.name,"autoSave","deskworks.center.service","deskworks.purchase.service","deskworks.userProfile.service","deskworks.inventory.priceList.service","deskworks.routeHelper","deskworks.helper","deskworks.dwAddCharges",p.a.name,"deskworks.SecurityDepositRecord",g.default.name,h.a.name,"deskworks.purchaseAuditDirective"]).config(["$routeProvider",function(e){e.when("/purchases/:purchaseId/edit",{templateUrl:"billing/purchase/purchase-edit.tpl.html",controller:"PurchaseEditCtrl as $ctrl",label:"Edit",routeBranch:"purchases",translations:["purchase","billing-profile","payments-assignment"],resolve:{reg:function(){},purchase:["$route","dwAlerts","state","purchaseService","routeHelper","resolveTimezone",function(e,t,r,n,a,l){return a.auth().then((function(){return a.selectUser()})).then((function(){return l()})).then((function(){return n.get(r.getCurrentCenterId(),r.getCurrentUserId(),e.current.params.purchaseId).catch((function(e){return t.error(e,"Failed to get purchase.")}))}))}],user:["dwAlerts","routeHelper","state","userProfileService","resolveTimezone",function(e,t,r,n,a){return t.auth().then((function(){return t.selectUser()})).then((function(){return a()})).then((function(){return n.get(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to get user profile.")}))}))}],center:["dwAlerts","centerService","state",function(e,t,r){return t.get(r.getCurrentCenterId(r.getCurrentCenterId())).catch((function(t){return e.error(t,"Failed to get center.")}))}],settings:["dwAlerts","setupService",function(e,t){return t.getSetupSettings().catch((function(t){return e.error(t,"Failed to load setup settings.")}))}],lazy:"lazyLoadPaymentsAssignment"}}),e.when("/new-member/:userId/membership/billing-profile/purchase/:purchaseId",{templateUrl:"billing/purchase/purchase-edit.tpl.html",controller:"PurchaseEditCtrl as $ctrl",label:"Purchase",routeBranch:"new-member",translations:["purchase","billing-profile","payments-assignment"],resolve:{reg:function(){return{member:!0,selfRegistration:!1,step:3,stepCount:3}},purchase:["$route","dwAlerts","state","purchaseService","routeHelper","resolveTimezone",function(e,t,r,n,a,l){return a.auth().then((function(){return a.selectUser()})).then((function(){return l()})).then((function(){return n.get(r.getCurrentCenterId(),e.current.params.userId,e.current.params.purchaseId).catch((function(e){return t.error(e,"Failed to get purchase.")}))}))}],user:["dwAlerts","routeHelper","state","userProfileService",function(e,t,r,n){return t.auth().then((function(){return t.selectUser()})).then((function(){return n.get(r.getCurrentCenterId(),r.getCurrentUserId()).catch((function(t){return e.error(t,"Failed to get user profile.")}))}))}],center:["dwAlerts","centerService","state",function(e,t,r){return t.get(r.getCurrentCenterId(r.getCurrentCenterId())).catch((function(t){return e.error(t,"Failed to get center.")}))}],settings:["dwAlerts","setupService",function(e,t){return t.getSetupSettings().catch((function(t){return e.error(t,"Failed to load setup settings.")}))}],lazy:"lazyLoadPaymentsAssignment"}})}]).controller("PurchaseEditCtrl",["$scope","$filter","$translate","$q","$injector","dwAlerts","state","center","purchase","helper","reg","user","settings","session","purchaseService","priceListService","SecurityDepositRecord","autoSave",function(e,t,r,n,l,i,f,u,p,g,h,m,I,R,E,b,C,T){var N,A=this;e.backPath="/purchases",e.$watch("state.getCurrentCenterId()",(function(t,r){t!==r&&f.setPath(e.backPath)})),A.center=u,A.reg=h,A.user=m,A.showOrderDates=f.isLoggedAdmin();var S=I.limitRefundProcessingTo;A.allowRefundProcessing=S[R.user.role]||d()(N=o()(S)).call(N,(function(e){return!S[e]})),A.purchase=p,angular.isDefined(f.getParam("redirect"))&&(A.redirect=f.getParam("redirect")),f.setPageTitle(r.instant("PURCHASE.PAGE_TITLE",{userName:m.fullNameCompany,centerName:u.name})),m.membershipPriceListId&&b.getPricelist(f.getCurrentCenterId(),m.membershipPriceListId).then((function(e){A.userPriceList=e})),A.queryConsolidations=function(){A.reg||E.queryConsolidations({centerId:f.getCurrentCenterId(),userId:A.user.id,purchaseId:A.purchase.id}).then((function(e){A.consolidations=e,A.consolidationId=(A.consolidations[0]||{}).id}))},A.queryConsolidations(),A.backToPurchases=function(){return f.setPath("/purchases")},A.consolidatePurchase=function(e){return E.consolidate(f.getCurrentCenterId(),f.getCurrentUserId(),A.purchase.id,e).catch((function(e){return i.error(e,"Failed to consolidate order with purchase.")})).then((function(){return A.updateInvoice()}))},A.updateInvoice=function(){return E.get(f.getCurrentCenterId(),f.getCurrentUserId(),A.purchase.id).catch((function(e){return i.error(e,"Failed to get purchase order.")})).then((function(e){A.purchase=e,A.queryConsolidations()})).then((function(t){return e.$broadcast("purchase:update")}))},A.updateSecurityDepositRecords=function(){return C.query({centerId:f.getCurrentCenterId(),userId:f.getCurrentUserId()}).catch((function(e){return i.error(e,"Failed to query security deposit records.")})).then((function(e){A.securityDepositRecords=e}))},A.updateSecurityDepositRecords(),A.update=function(){return n.all([A.updateInvoice(),A.updateSecurityDepositRecords()])},A.filterBillingMethods=function(e){var t,r,n=A.securityDepositRecords&&c()(t=A.securityDepositRecords).call(t)||[],l=s()(r=a()(n).call(n)).call(r,(function(e){return angular.isDefined(e.balance)}));return"securityDeposit"!==e.id||l&&l.balance>0},A.onOrderDateChange=T.wrap((function(){if(g.pointFirstInvalid(".purchase-dates"))return;var e=g.pick(A.purchase,["billDate","dueDate"]);return A.orderSpin=!0,E.update(f.getCurrentCenterId(),f.getCurrentUserId(),A.purchase.id,e).catch((function(e){return i.error(e,"Failed to update purchase order.")})).finally((function(e){return A.orderSpin=!1}))})),A.isPaymentsAssignmentEnabled=function(){return R.isAdmin()&&l.has("paymentsAssignmentDialog")},A.paymentAssignment=function(){return l.get("paymentsAssignmentDialog").open({scope:e.$new(),purchaseId:A.purchase.id})}}])},w7o6:function(e,t,r){},yjMN:function(e,t,r){"use strict";r.r(t);var n=r("nbuU"),a=r.n(n),l=r("uVw+"),s=r.n(l),i=r("kL89");t.default=angular.module("deskworks.purchasePaymentDirective",[i.default.name]).directive("purchasePayment",(function(){return{template:s.a,restrict:"E",scope:!0,controller:"PurchasePaymentDirectiveCtrl as $ctrl",bindToController:{type:"@",settings:"<",user:"<",purchaseId:"<",defaultAmount:"<",updateInvoice:"&",filterBillingMethods:"<?"}}})).controller("PurchasePaymentDirectiveCtrl",["$scope","state","helper","purchasePaymentTypes",function(e,t,r,n){var l=this;l.$onInit=function(){l.types=n,l.postDate=moment(),l.payment=l.payment||{},l.payment.receivedAt=moment(),l.types[l.type].optsBillingMethod&&e.$watch("$ctrl.billingMethod",(function(){var e;l.billingMethod||(l.billingMethod=a()(e=l.types[l.type].optsBillingMethod).call(e,(function(e){return e.id===l.user.billingMethod})),l.billingMethod=l.billingMethod||l.types[l.type].optsBillingMethod[0]);l.billingMethod.paymentMethodKey?(l.payment.receivedAt=moment(),l.user.billingMethod===l.billingMethod.id?l.payment.paymentMethodId=l.user.paymentMethodId:1===l.user[l.billingMethod.paymentMethodKey].length?l.payment.paymentMethodId=l.user[l.billingMethod.paymentMethodKey][0].id:delete l.payment.paymentMethodId):delete l.payment.paymentMethodId}))},l.$onChanges=function(){l.payment=l.payment||{},l.defaultAmount&&(l.payment.amount=l.defaultAmount)},l.createPayment=function(){if(!r.pointFirstInvalid("purchase-payment[type=".concat(l.type,"]")))return l.types[l.type].optsBillingMethod?l.payment.billingMethod=l.billingMethod.id:(delete l.payment.billingMethod,delete l.payment.paymentMethodId),l.types[l.type].submit(t.getCurrentCenterId(),t.getCurrentUserId(),l.purchaseId,l.payment).then((function(){return l.updateInvoice()}))},l.getAmountWithFee=function(){var e=l.settings.paymentProcessingRates[l.billingMethod&&l.billingMethod.id];if(!l.settings.enablePaymentProcessingCharges||!e||!l.types[l.type].hasProcessingFee)return 0;var t=r.round(e*+l.payment.amount/100);return+l.payment.amount+t}}])}}]);